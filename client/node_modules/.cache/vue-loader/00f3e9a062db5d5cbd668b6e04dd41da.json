{"remainingRequest":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/hervey/Projects/Development/audiomarketplace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hervey/Projects/Development/audiomarketplace/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hervey/Projects/Development/audiomarketplace/src/components/audio/AudioBox.vue?vue&type=template&id=923c3144&scoped=true&","dependencies":[{"path":"/Users/hervey/Projects/Development/audiomarketplace/src/components/audio/AudioBox.vue","mtime":1633846946250},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}