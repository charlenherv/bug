{"remainingRequest":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hervey/Projects/Development/audiomarketplace/src/components/general/UploadBox.vue?vue&type=style&index=0&id=b93443ba&lang=scss&scoped=true&","dependencies":[{"path":"/Users/hervey/Projects/Development/audiomarketplace/src/components/general/UploadBox.vue","mtime":1631801302022},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hervey/Projects/Development/audiomarketplace/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouVXBsb2FkQm94X0hlYWRlciB7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBmb250LXNpemU6IDIwcHg7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogIHRleHQtYWxpZ246IGxlZnQ7Cn0KLlVwbG9hZEJveCwKLlVwbG9hZEJveF9Db250YWluZXIgewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwYWRkaW5nOiAxMHB4OwogIGJvcmRlci1yYWRpdXM6IDEwcHg7Cn0KLlVwbG9hZEJveCB7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsgCiAgbWFyZ2luOiAwIGF1dG87CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKICBiYWNrZ3JvdW5kOiAjZTJlYmYwOwp9Ci5VcGxvYWRCb3hfRHJvcEFyZWEgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBoZWlnaHQ6IDE1MHB4OwogIHdpZHRoOjEwMCU7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgYm9yZGVyLXJhZGl1czogMTBweDsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB3aWR0aD0nMTAwJTI1JyBoZWlnaHQ9JzEwMCUyNScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzZSUzY3JlY3Qgd2lkdGg9JzEwMCUyNScgb3BhY2l0eT0nMC4yJyBoZWlnaHQ9JzEwMCUyNScgZmlsbD0nbm9uZScgc3Ryb2tlPSclMjMzMzMnIHN0cm9rZS13aWR0aD0nMicgc3Ryb2tlLWRhc2hhcnJheT0nMjUlMmMgMTQnIHN0cm9rZS1kYXNob2Zmc2V0PScwJyBzdHJva2UtbGluZWNhcD0nc3F1YXJlJy8lM2UlM2Mvc3ZnJTNlIik7Cn0KLlVwbG9hZEJveF9Ecm9wQXJlYV9CdXR0b24gewogIHBvc2l0aW9uOmFic29sdXRlOwogIHRvcDo1MCU7CiAgbGVmdDo1MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwtNTAlKTsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KLkF1ZGlvQm94IHsKICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9Cg=="},{"version":3,"sources":["UploadBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UploadBox.vue","sourceRoot":"src/components/general","sourcesContent":["<template>\n  <div :class=\"{\n    'UploadBox':true\n    }\">\n    <div class=\"UploadBox_Container\">\n\n      <form @submit.prevent=\"sendFile\" enctype=\"multipart/form-data\">\n        <div class=\"UploadBox_Header\">Upload</div>\n        \n        <!-- File drop area -->\n        <div ref=\"DropArea\" class=\"UploadBox_DropArea\">\n          <label for=\"UploadBox_FileSelect\" class=\"UploadBox_DropArea_Button\" data-button=\"\" data-button-color=\"blue\">Select or drag files here</label>\n          <input id=\"UploadBox_FileSelect\" class=\"Style_HidePermanent\" type=\"file\" ref=\"files\" multiple @change=\"onSelect\"/>\n          <div class=\"UploadBox_Message\">{{message}}</div>\n        </div>\n      </form>\n\n      <!-- Uploaded items -->\n      <AudioBox v-for=\"(item,index) in uploadedFiles\" :key=\"index\" :item=\"item\" :mode=\"'edit'\" :appData=\"appData\" @deleteSound=\"deleteSound\"/>\n \n      <!-- Form controls -->\n      <div class=\"UploadBox_Controls\" v-if=\"uploadedFiles.length > 0\">\n          <button id=\"UploadBox_Clear\" data-button=\"\">Clear</button>\n          <button id=\"UploadBox_Save\" data-button=\"\" data-button-color=\"blue\" @click=\"postSounds()\">Save</button>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport AudioBox from \"../audio/AudioBox.vue\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\n\nexport default {\n  name: \"UploadBox\",\n  props: ['appData'],\n  components: {\n    AudioBox\n  },\n  data() {\n    return {\n      status: 'initial',\n      message: \"\",\n      filesToUpload: [],\n      uploadedFiles: []\n    }\n  },\n  methods: {\n    validate(file) {\n      const MAX_SIZE = 1000000;\n      const allowedTypes = ['audio/mpeg','audio/mp4','audio/ogg','audio/vnd.wav','audio/vorbis'];\n      \n      if (file.size < MAX_SIZE) {\n        return `This file is too large. Max size is ${MAX_SIZE/1000}Kb`;\n      }\n\n      if (!allowedTypes.includes(file.type)) {\n        return \"This file is not an audio file\";\n      }\n      \n      return \"\";\n    },\n    async sendFiles() {\n      const formData = new FormData();\n      formData.append('userId', this.$store.state.currentUser._id);\n      _.forEach(this.filesToUpload, (file) => {\n        if (this.validate(file) === \"\") {\n          formData.append('files', file.actual);\n        } else {\n          file.status = 'Not sent';\n        }\n      });\n      if (this.filesToUpload.length > 0) {\n        axios.post('/uploadAudio', formData)\n        .then(response => {\n          // Process files\n          const uploadedFiles = response.data.uploadedFiles;\n          _.forEach(uploadedFiles, (file) => {\n\n            // Defaults\n            file.editable = {\n              title: file.originalname,\n              author: 'Username', // Add username automatically, entered name if guest\n              description: 'Enter a description here.',\n              tags: [],\n              marketplace: {\n                mode: 'none'\n              },\n              effects: ['bass'],\n              preview: {\n                \"start\": 0,\n                \"duration\": file.duration\n              }\n            };\n          });\n          \n          // Set uploaded files\n          this.uploadedFiles = [...this.uploadedFiles,...uploadedFiles];\n\n          // Reset file selector\n          this.files = [];\n          this.filesToUpload = [];\n        })\n        .catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Display: No valid audio files were selected');\n      }\n    },\n    onSelect() {\n      const files = this.$refs.files.files;\n      this.filesToUpload = [\n        ...this.filesToUpload,\n        ..._.map(files, file => ({\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          actual: file,\n          invalidMessage: this.validate(file)\n        }))\n      ]\n      this.sendFiles(this.filesToUpload);\n    },\n    async postSounds(){\n      const formData = new FormData();\n      _.forEach(this.uploadedFiles, (item) => {\n          formData.append('soundsToUpdate[]', JSON.stringify(item));\n      });\n      axios.post('/updateSound', formData)\n        .then(response => {\n          console.log(response);\n          this.uploadedFiles = [];\n        })\n        .catch(err => {\n          console.log(err);\n        });      \n    },\n    deleteSound(_id) {\n      const sound = this.uploadedFiles.filter(file => {\n        return file._id = _id\n      })[0];\n      const index = this.uploadedFiles.indexOf(sound);\n      if (index > -1) {\n        this.uploadedFiles.splice(index,  1);\n      }\n    }\n  },\n  mounted() {\n\n    /* DROP AREA - Accept files\n    /*\n      Listen to all of the drag events and bind an event listener to each\n      for the fileform.\n    */\n    ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach( function( evt ) {\n      /*\n        For each event add an event listener that prevents the default action\n        (opening the file in the browser) and stop the propagation of the event (so\n        no other elements open the file in the browser)\n      */\n      this.$refs.DropArea.addEventListener(evt, function(e){\n        e.preventDefault();\n        e.stopPropagation();\n      }.bind(this), false);\n    }.bind(this));\n\n    /*\n      Add an event listener for drop to the form\n    */\n    this.$refs.DropArea.addEventListener('drop', function(e){\n      /*\n        Capture the files from the drop event and add them to our local files\n        array.\n      */ \n\n      this.filesToUpload = [\n        ...this.filesToUpload,\n        ..._.map(e.dataTransfer.files, file => ({\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          actual: file,\n          invalidMessage: this.validate(file)\n        }))\n      ]\n      this.sendFiles(this.filesToUpload);\n\n    }.bind(this));\n    \n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n  .UploadBox_Header {\n    margin-bottom: 10px;\n    font-size: 20px;\n    font-weight: 600;\n    text-transform: uppercase;\n    text-align: left;\n  }\n  .UploadBox,\n  .UploadBox_Container {\n    box-sizing: border-box;\n    overflow: hidden;\n    padding: 10px;\n    border-radius: 10px;\n  }\n  .UploadBox {\n    margin-bottom: 20px; \n    margin: 0 auto;\n    margin-bottom: 20px;\n    background: #e2ebf0;\n  }\n  .UploadBox_DropArea {\n    position: relative;\n    height: 150px;\n    width:100%;\n    background: transparent;\n    border-radius: 10px;\n    margin-bottom: 10px;\n    background-image: url(\"data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' opacity='0.2' height='100%25' fill='none' stroke='%23333' stroke-width='2' stroke-dasharray='25%2c 14' stroke-dashoffset='0' stroke-linecap='square'/%3e%3c/svg%3e\");\n  }\n  .UploadBox_DropArea_Button {\n    position:absolute;\n    top:50%;\n    left:50%;\n    transform: translate(-50%,-50%);\n    display: inline-block;\n  }\n  .AudioBox {\n    margin-bottom: 20px;\n  }\n</style>"]}]}